
worker_processes auto;

events {
  accept_mutex off;
  multi_accept off;
  worker_connections 65536;
}

http {
  include mime.types;
  default_type application/octet-stream;

  access_log off;
  error_log /dev/stderr;

  server_tokens off;

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;

  keepalive_timeout  65;

  gzip  on;


  include conf.d/*.conf;


  server {
    listen 80;

    location /users/ {
      default_type application/json;

      location ~/users/(?<id>[0-9]+)/visits {
        content_by_lua_block {
          local cjson = require('cjson')

          local users_to_visits = ngx.shared.users_to_visits
          local visits = ngx.shared.visits

          local users = ngx.shared.users
          local user_id = tonumber(ngx.var.id)
          local user_visits = {}
          
          -- if no such user - exit with 404
          if not users.values[user_id] then
            ngx.exit(ngx.HTTP_NOT_FOUND)
          end

          local item_sort = require('item_sort')
          local item_filter = require('item_filter')
          local filters = item_filter.validate('visits', ngx.req.get_uri_args())

          -- scan users visits and select valid using passed filters
          for index, visit_id in pairs(users_to_visits[user_id]) do
            local filter_matched = true

            for filter_name, filter_value in pairs(filters) do
              filter_matched = item_filter.match_filter(
                'visits',
                visit_id,
                filter_name,
                filter_value
              )
            end

            if filter_matched then
              table.insert(user_visits, visits.values[visit_id])
            end
          end

          item_sort.sort('visits', user_visits)
          ngx.say(cjson.encode({['visits'] = user_visits}))
        }
      }

      location ~/users/(?<id>[0-9]+) {
        content_by_lua_block {
          local cjson = require('cjson')
          local users = ngx.shared.users
          local id = tonumber(ngx.var.id)

          -- 404 if that id not exists
          if not users.values[id] then
            ngx.exit(ngx.HTTP_NOT_FOUND)
          end

          local request_method = ngx.req.get_method()

          -- if method is GET, then simply return the item
          if request_method == 'GET' then
            ngx.say(cjson.encode(users.values[id]))
            ngx.exit(ngx.HTTP_OK)
          end
          --

          -- if POST, then read the body and try to update item
          ngx.req.read_body() -- reading client body
          local user = users.values[id] -- it's a pointer to a table
          local request_body = cjson.decode(ngx.req.get_body_data())

          for key, value in pairs(request_body) do
            if not key or not value then
              ngx.exit(ngx.HTTP_BAD_REQUEST)
            end

            user[key] = value
          end

          ngx.say('{}')
          --
        }
      }

      location /users/new {
        content_by_lua_block {
          if ngx.req.get_method() ~= 'POST' then
            ngx.exit(ngx.HTTP_BAD_REQUEST)
          end

          ngx.req.read_body()
          local users = ngx.shared.users
          local user = cjson.decode(ngx.req.get_body_data())

          if not user.id then
            ngx.exit(ngx.HTTP_BAD_REQUEST)
          end

          for key, value in pairs(user) do
            if not key or not value then
              ngx.exit(ngx.HTTP_BAD_REQUEST)
            end
          end

          users.values[user.id] = user
          ngx.say('{}')
        }
      }
    }

    location /locations/ {
      default_type application/json;

      location ~/locations/(?<id>[0-9]+)/avg {
        content_by_lua_block {
          if ngx.req.get_method() ~= 'GET' then
            ngx.exit(ngx.HTTP_BAD_REQUEST)
          end

          local id = tonumber(ngx.var.id)
          local locations = ngx.shared.locations

          if not locations.values[id] then
            ngx.exit(ngx.HTTP_NOT_FOUND)
          end

          local cjson = require('cjson')

          local visits = ngx.shared.visits
          local locations_to_visits = ngx.shared.locations_to_visits

          local visit_mark_sum = 0
          local visit_mark_count = 0

          for index, visit_id in pairs(locations_to_visits[id]) do
            visit_mark_sum = visit_mark_sum + visits.values[visit_id].mark
            visit_mark_count = visit_mark_count + 1
          end

          ngx.say(cjson.encode({['avg'] = string.format('%.5f', visit_mark_sum / visit_mark_count)}))
        }
      }

      location ~/locations/(?<id>[0-9]+) {
        content_by_lua_block {
          local cjson = require('cjson')

          local locations = ngx.shared.locations
          local id = tonumber(ngx.var.id)

          -- 404 if that id not exists
          if not locations.values[id] then
            ngx.exit(ngx.HTTP_NOT_FOUND)
          end

          local request_method = ngx.req.get_method()

          -- if method is GET, then simply return the item
          if request_method == 'GET' then
            ngx.say(cjson.encode(locations.values[id]))
            ngx.exit(ngx.HTTP_OK)
          end
          --

          -- if POST, then read the body and try to update item
          ngx.req.read_body() -- reading client body
          local location = locations.values[id] -- it's a pointer to a table
          local request_body = cjson.decode(ngx.req.get_body_data())

          for key, value in pairs(request_body) do
            if not key or not value then
              ngx.exit(ngx.HTTP_BAD_REQUEST)
            end

            location[key] = value
          end

          ngx.say('{}')
        }
      }

      location /locations/new {
        content_by_lua_block {
          if ngx.req.get_method() ~= 'POST' then
            ngx.exit(ngx.HTTP_BAD_REQUEST)
          end

          ngx.req.read_body()
          local locations = ngx.shared.locations
          local location = cjson.decode(ngx.req.get_body_data())

          if not location.id then
            ngx.exit(ngx.HTTP_BAD_REQUEST)
          end

          for key, value in pairs(location) do
            if not key or not value then
              ngx.exit(ngx.HTTP_BAD_REQUEST)
            end
          end

          locations.values[location.id] = location
          ngx.say('{}')
        }
      }
    }

    location /visits/ {
      default_type application/json;

      location ~/visits/(?<id>[0-9]+) {
        content_by_lua_block {
          local cjson = require('cjson')
          local visits = ngx.shared.visits
          local id = tonumber(ngx.var.id)

          -- 404 if that id not exists
          if not visits.values[id] then
            ngx.exit(ngx.HTTP_NOT_FOUND)
          end

          local request_method = ngx.req.get_method()

          -- if method is GET, then simply return the item
          if request_method == 'GET' then
            ngx.say(cjson.encode(visits.values[id]))
            ngx.exit(ngx.HTTP_OK)
          end
          --

          -- if POST, then read the body and try to update item
          ngx.req.read_body() -- reading client body
          local visit = visits.values[id] -- it's a pointer to a table
          local request_body = cjson.decode(ngx.req.get_body_data())

          for key, value in pairs(request_body) do
            if not key or not value then
              ngx.exit(ngx.HTTP_BAD_REQUEST)
            end

            visit[key] = value
          end

          ngx.say('{}')
        }
      }

      location /visits/new {
        content_by_lua_block {
          if ngx.req.get_method() ~= 'POST' then
            ngx.exit(ngx.HTTP_BAD_REQUEST)
          end

          ngx.req.read_body()
          local visits = ngx.shared.visits
          local visit = cjson.decode(ngx.req.get_body_data())

          if not visit.id then
            ngx.exit(ngx.HTTP_BAD_REQUEST)
          end

          for key, value in pairs(visit) do
            if not key or not value then
              ngx.exit(ngx.HTTP_BAD_REQUEST)
            end
          end

          visits.values[visit.id] = visit
          ngx.say('{}')

          -- additional step updating relations users->visits / locations->visits
          local users_to_visits = ngx.shared.users_to_visits
          local locations_to_visits = ngx.shared.locations_to_visits

          if not users_to_visits[visit.user] then
            users_to_visits[visit.user] = {}
          end

          if not locations_to_visits[visit.location] then
            locations_to_visits[visit.location] = {}
          end

          table.insert(users_to_visits[visit.user], visit.id)
          table.insert(locations_to_visits[visit.location], visit.id)
          ---
        }
      }
    }
  }
}

